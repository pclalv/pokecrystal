#!/usr/bin/env ruby

require 'json'
# require 'pry-byebug'

VERSION = "crystal-speedchoice"

BLACKLISTED_LABELS = %w(
  SurfFunction.ckir_BEFORE_CHECK_FOGBADGE
  TryCutOW.ckir_BEFORE_CHECK_HIVEBADGE
  FlyFunction.ckir_BEFORE_CHECK_STORMBADGE
)

# non-diffs that should be included anyway. these are 'patches'; a
# patch does not necessarily have a diff, but the randomizer can
# generate a diff patch from it.
PATCHES = %w(
  UndergroundWarehouseUltraBall.ckir_BEFORE_ITEMBALL_ULTRABALL

  WhitneyScript_0x5400c.ckir_BEFORE_checkflag_ENGINE_PLAINBADGE
  BlackthornGymClairScript.ckir_BEFORE_checkflag_ENGINE_RISINGBADGE

  UnknownText_0x18b064.ckir_BEFORE_para_lost_your_favorite_doll
  Copycat.ckir_BEFORE_takeitem_LOST_ITEM
  Copycat.ckir_BEFORE_checkitem_LOST_ITEM

  FuchsiaGym_MapEventHeader.ckir_BEFORE_person_event_SPRITE_FUCHSIA_GYM_1_at_7_5
  FuchsiaGym_MapEventHeader.ckir_BEFORE_person_event_SPRITE_FUCHSIA_GYM_2_at_11_5
  FuchsiaGym_MapEventHeader.ckir_BEFORE_person_event_SPRITE_FUCHSIA_GYM_3_at_4_9
  FuchsiaGym_MapEventHeader.ckir_BEFORE_person_event_SPRITE_FUCHSIA_GYM_4_at_2_4
  FuchsiaGym_MapEventHeader.ckir_BEFORE_person_event_SPRITE_JANINE_at_10_1

  AzaleaGymTriggerRockets.ckir_BEFORE_GoldenrodRockets
  BlackthornGymTriggerRockets.ckir_BEFORE_GoldenrodRockets
  CeladonGymTriggerRockets.ckir_BEFORE_GoldenrodRockets
  CeruleanGymTriggerRockets.ckir_BEFORE_GoldenrodRockets
  CianwoodGymTriggerRockets.ckir_BEFORE_GoldenrodRockets
  EcruteakGymTriggerRockets.ckir_BEFORE_GoldenrodRockets
  FuchsiaGymTriggerRockets.ckir_BEFORE_GoldenrodRockets
  GoldenrodGymTriggerRockets.ckir_BEFORE_GoldenrodRockets
  MahoganyGymTriggerRockets.ckir_BEFORE_GoldenrodRockets
  OlivineGymTriggerRockets.ckir_BEFORE_GoldenrodRockets
  PewterGymTriggerRockets.ckir_BEFORE_GoldenrodRockets
  SaffronGymTriggerRockets.ckir_BEFORE_GoldenrodRockets
  SeafoamGymTriggerRockets.ckir_BEFORE_GoldenrodRockets
  VermilionGymTriggerRockets.ckir_BEFORE_GoldenrodRockets
  VioletGymTriggerRockets.ckir_BEFORE_GoldenrodRockets
  ViridianGymTriggerRockets.ckir_BEFORE_GoldenrodRockets

  AzaleaGymTriggerRockets.ckir_BEFORE_RadioTowerRockets
  BlackthornGymTriggerRockets.ckir_BEFORE_RadioTowerRockets
  CeladonGymTriggerRockets.ckir_BEFORE_RadioTowerRockets
  CeruleanGymTriggerRockets.ckir_BEFORE_RadioTowerRockets
  CianwoodGymTriggerRockets.ckir_BEFORE_RadioTowerRockets
  EcruteakGymTriggerRockets.ckir_BEFORE_RadioTowerRockets
  FuchsiaGymTriggerRockets.ckir_BEFORE_RadioTowerRockets
  GoldenrodGymTriggerRockets.ckir_BEFORE_RadioTowerRockets
  MahoganyGymTriggerRockets.ckir_BEFORE_RadioTowerRockets
  OlivineGymTriggerRockets.ckir_BEFORE_RadioTowerRockets
  PewterGymTriggerRockets.ckir_BEFORE_RadioTowerRockets
  SaffronGymTriggerRockets.ckir_BEFORE_RadioTowerRockets
  SeafoamGymTriggerRockets.ckir_BEFORE_RadioTowerRockets
  VermilionGymTriggerRockets.ckir_BEFORE_RadioTowerRockets
  VioletGymTriggerRockets.ckir_BEFORE_RadioTowerRockets
  ViridianGymTriggerRockets.ckir_BEFORE_RadioTowerRockets
)

ORIG_JSON = ENV.fetch("ORIG_JSON", "#{VERSION}-speedchoice-labels-label-details.json")
MOD_JSON = ENV.fetch("MOD_JSON", "#{VERSION}-speedchoice-changes-label-details.json")

def speedchoice_labels_json
   JSON.load(File.read(ORIG_JSON)).
    sort_by { |h| h['label'] }
end

def speedchoice_changes_json
  JSON.load(File.read(MOD_JSON)).
    sort_by { |h| h['label'] }
end

def diff
  speedchoice_labels_json.
    zip(speedchoice_changes_json).
    filter { |orig, modified| orig != modified }.
    map do |orig, modified|
      raise <<~EOF unless orig['label'] == modified['label'] && orig['address_range'] == modified['address_range']
        #{orig['label']} != #{modified['label']}
        #{orig['address_range']} != #{modified['address_range']}
      EOF

      {
        :label => orig['label'],
        :address_range => orig['address_range'],
        :integer_values => {
          :old => orig['integer_values'].split(" ").map(&method(:Integer)),
          :new => modified['integer_values'].split(" ").map(&method(:Integer)),
        },
      }
    end.
    reject { |d| BLACKLISTED_LABELS.include?(d['label']) }.
    to_json
end

def patches
  speedchoice_labels_json.
    filter { |p| PATCHES.include?(p['label']) }.
    map do |p|
      {
        :label => p['label'],
        :address_range => p['address_range'],
        :integer_values => {
          :old => p['integer_values'].split(" ").map(&method(:Integer)),
        },
      }
    end.
    to_json
end

def main
  File.write("#{VERSION}-speedchoice-changes-diff.json", diff)
  File.write("#{VERSION}-patches.json", patches)
end

main
